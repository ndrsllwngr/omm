input AddCommentInput {
  createdBy: ObjectId
  text: String
  createdAt: DateTime
  meme_id: ObjectId
}

type Comment {
  _id: ObjectId
  createdAt: DateTime
  createdBy: User
  meme_id: Meme
  text: String
}

input CommentCreatedByRelationInput {
  create: UserInsertInput
  link: ObjectId
}

input CommentInsertInput {
  text: String
  createdAt: DateTime
  createdBy: CommentCreatedByRelationInput
  _id: ObjectId
  meme_id: CommentMeme_idRelationInput
}

input CommentMeme_idRelationInput {
  create: MemeInsertInput
  link: ObjectId
}

input CommentQueryInput {
  createdAt: DateTime
  text_lt: String
  text_lte: String
  text_nin: [String]
  meme_id_exists: Boolean
  _id_gt: ObjectId
  text_in: [String]
  _id_in: [ObjectId]
  _id_lte: ObjectId
  meme_id: MemeQueryInput
  _id_gte: ObjectId
  text: String
  _id: ObjectId
  text_exists: Boolean
  createdAt_exists: Boolean
  createdAt_ne: DateTime
  AND: [CommentQueryInput!]
  _id_ne: ObjectId
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_in: [DateTime]
  _id_lt: ObjectId
  createdBy: UserQueryInput
  _id_exists: Boolean
  text_gt: String
  text_gte: String
  createdAt_nin: [DateTime]
  _id_nin: [ObjectId]
  createdAt_gt: DateTime
  text_ne: String
  createdAt_gte: DateTime
  OR: [CommentQueryInput!]
  createdBy_exists: Boolean
}

enum CommentSortByInput {
  TEXT_ASC
  CREATEDBY_DESC
  _ID_DESC
  MEME_ID_ASC
  MEME_ID_DESC
  CREATEDAT_DESC
  CREATEDBY_ASC
  _ID_ASC
  TEXT_DESC
  CREATEDAT_ASC
}

input CommentUpdateInput {
  meme_id: CommentMeme_idRelationInput
  _id: ObjectId
  createdAt: DateTime
  createdBy: CommentCreatedByRelationInput
  createdBy_unset: Boolean
  _id_unset: Boolean
  text_unset: Boolean
  meme_id_unset: Boolean
  createdAt_unset: Boolean
  text: String
}

"""
The `DateTime` scalar type represents a DateTime. The DateTime is serialized as an RFC 3339 quoted string
"""
scalar DateTime

type DeleteManyPayload {
  deletedCount: Int!
}

type Draft {
  _id: ObjectId
  createdAt: DateTime
  createdBy: User
  downVotes: [User]
  forkedBy: [Meme]
  forkedFrom: Meme
  json: String
  points: Int
  svg: String
  template: DraftTemplate
  title: String
  upVotes: [User]
  url: String
  views: Int
  visibility: String
}

input DraftCreatedByRelationInput {
  link: ObjectId
  create: UserInsertInput
}

input DraftDownVotesRelationInput {
  link: [ObjectId]
  create: [UserInsertInput]
}

input DraftForkedByRelationInput {
  create: [MemeInsertInput]
  link: [ObjectId]
}

input DraftForkedFromRelationInput {
  create: MemeInsertInput
  link: ObjectId
}

input DraftInsertInput {
  json: String
  downVotes: DraftDownVotesRelationInput
  url: String
  views: Int
  title: String
  forkedBy: DraftForkedByRelationInput
  points: Int
  createdBy: DraftCreatedByRelationInput
  visibility: String
  svg: String
  forkedFrom: DraftForkedFromRelationInput
  template: DraftTemplateInsertInput
  createdAt: DateTime
  upVotes: DraftUpVotesRelationInput
  _id: ObjectId
}

input DraftQueryInput {
  svg_gt: String
  svg_exists: Boolean
  title_in: [String]
  createdAt_lte: DateTime
  createdAt_nin: [DateTime]
  url_gte: String
  views_exists: Boolean
  visibility_exists: Boolean
  _id_exists: Boolean
  createdAt: DateTime
  visibility: String
  _id_nin: [ObjectId]
  _id_lte: ObjectId
  views_in: [Int]
  points_gte: Int
  points_in: [Int]
  createdAt_in: [DateTime]
  title_lt: String
  _id_lt: ObjectId
  createdAt_gte: DateTime
  forkedBy_in: [MemeQueryInput]
  title_lte: String
  _id_ne: ObjectId
  svg_lt: String
  template_exists: Boolean
  json_gte: String
  views_lte: Int
  _id_gt: ObjectId
  upVotes_nin: [UserQueryInput]
  downVotes_nin: [UserQueryInput]
  views_ne: Int
  upVotes: [UserQueryInput]
  svg_ne: String
  json_lt: String
  views: Int
  visibility_ne: String
  visibility_lte: String
  json_nin: [String]
  json_lte: String
  points: Int
  url_gt: String
  createdBy: UserQueryInput
  createdBy_exists: Boolean
  OR: [DraftQueryInput!]
  json_exists: Boolean
  points_gt: Int
  svg_nin: [String]
  forkedFrom_exists: Boolean
  upVotes_in: [UserQueryInput]
  title_exists: Boolean
  title: String
  points_exists: Boolean
  forkedFrom: MemeQueryInput
  url_exists: Boolean
  svg_lte: String
  points_nin: [Int]
  url_nin: [String]
  upVotes_exists: Boolean
  template: DraftTemplateQueryInput
  points_ne: Int
  visibility_nin: [String]
  title_gt: String
  _id: ObjectId
  svg_gte: String
  forkedBy: [MemeQueryInput]
  json_gt: String
  json: String
  url_lte: String
  json_ne: String
  views_gte: Int
  url_in: [String]
  title_gte: String
  downVotes: [UserQueryInput]
  points_lt: Int
  _id_in: [ObjectId]
  url_lt: String
  AND: [DraftQueryInput!]
  createdAt_ne: DateTime
  visibility_gte: String
  points_lte: Int
  url_ne: String
  svg_in: [String]
  forkedBy_exists: Boolean
  downVotes_in: [UserQueryInput]
  visibility_gt: String
  views_gt: Int
  url: String
  forkedBy_nin: [MemeQueryInput]
  createdAt_exists: Boolean
  _id_gte: ObjectId
  visibility_in: [String]
  views_lt: Int
  title_ne: String
  downVotes_exists: Boolean
  title_nin: [String]
  views_nin: [Int]
  createdAt_gt: DateTime
  visibility_lt: String
  svg: String
  createdAt_lt: DateTime
  json_in: [String]
}

enum DraftSortByInput {
  URL_DESC
  VISIBILITY_ASC
  JSON_DESC
  POINTS_DESC
  SVG_ASC
  SVG_DESC
  _ID_DESC
  TITLE_DESC
  VIEWS_DESC
  _ID_ASC
  CREATEDBY_DESC
  CREATEDAT_ASC
  VISIBILITY_DESC
  FORKEDFROM_ASC
  TITLE_ASC
  JSON_ASC
  POINTS_ASC
  CREATEDBY_ASC
  CREATEDAT_DESC
  URL_ASC
  FORKEDFROM_DESC
  VIEWS_ASC
}

type DraftTemplate {
  id: Template
  url: String
}

input DraftTemplateIdRelationInput {
  create: TemplateInsertInput
  link: ObjectId
}

input DraftTemplateInsertInput {
  id: DraftTemplateIdRelationInput
  url: String
}

input DraftTemplateQueryInput {
  url_exists: Boolean
  OR: [DraftTemplateQueryInput!]
  url_lte: String
  url_nin: [String]
  id: TemplateQueryInput
  url: String
  url_in: [String]
  url_ne: String
  id_exists: Boolean
  url_gt: String
  url_gte: String
  AND: [DraftTemplateQueryInput!]
  url_lt: String
}

input DraftTemplateUpdateInput {
  id_unset: Boolean
  url: String
  url_unset: Boolean
  id: DraftTemplateIdRelationInput
}

input DraftUpdateInput {
  json_unset: Boolean
  forkedBy: DraftForkedByRelationInput
  svg_unset: Boolean
  _id_unset: Boolean
  createdBy_unset: Boolean
  views: Int
  points_unset: Boolean
  views_inc: Int
  views_unset: Boolean
  _id: ObjectId
  upVotes: DraftUpVotesRelationInput
  downVotes_unset: Boolean
  createdAt: DateTime
  upVotes_unset: Boolean
  template_unset: Boolean
  points: Int
  createdBy: DraftCreatedByRelationInput
  forkedFrom: DraftForkedFromRelationInput
  url: String
  url_unset: Boolean
  title_unset: Boolean
  createdAt_unset: Boolean
  json: String
  template: DraftTemplateUpdateInput
  forkedBy_unset: Boolean
  svg: String
  title: String
  downVotes: DraftDownVotesRelationInput
  visibility: String
  points_inc: Int
  visibility_unset: Boolean
  forkedFrom_unset: Boolean
}

input DraftUpVotesRelationInput {
  link: [ObjectId]
  create: [UserInsertInput]
}

input FetchMemeInput {
  conditions: String
  sorts: String
  next: Boolean
  meme_id: ObjectId!
}

input FetchRandomMemeInput {
  conditions: String
  meme_id: ObjectId!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Meme {
  _id: ObjectId
  commentCount: Int
  comments: [Comment]
  createdAt: DateTime
  createdBy: User
  downVotes: [User]
  forkedBy: [Meme]
  forkedFrom: Meme
  json: String
  points: Int
  svg: String
  template: MemeTemplate
  title: String
  upVotes: [User]
  url: String
  views: Int
  visibility: String
}

input MemeCommentsRelationInput {
  create: [CommentInsertInput]
  link: [ObjectId]
}

input MemeCreatedByRelationInput {
  create: UserInsertInput
  link: ObjectId
}

input MemeDownVotesRelationInput {
  create: [UserInsertInput]
  link: [ObjectId]
}

input MemeForkedByRelationInput {
  create: [MemeInsertInput]
  link: [ObjectId]
}

input MemeForkedFromRelationInput {
  create: MemeInsertInput
  link: ObjectId
}

input MemeInsertInput {
  comments: MemeCommentsRelationInput
  createdBy: MemeCreatedByRelationInput
  json: String
  views: Int
  createdAt: DateTime
  upVotes: MemeUpVotesRelationInput
  commentCount: Int
  visibility: String
  points: Int
  forkedBy: MemeForkedByRelationInput
  forkedFrom: MemeForkedFromRelationInput
  _id: ObjectId
  url: String
  template: MemeTemplateInsertInput
  downVotes: MemeDownVotesRelationInput
  svg: String
  title: String
}

input MemeQueryInput {
  createdAt_exists: Boolean
  json_lte: String
  views_lte: Int
  json_exists: Boolean
  json_gte: String
  views_in: [Int]
  points: Int
  url_lte: String
  downVotes_in: [UserQueryInput]
  createdAt_in: [DateTime]
  url_nin: [String]
  json_in: [String]
  createdBy_exists: Boolean
  forkedFrom: MemeQueryInput
  svg_lt: String
  url_in: [String]
  json_lt: String
  commentCount_in: [Int]
  commentCount_gt: Int
  svg_gte: String
  svg_lte: String
  visibility_lte: String
  svg_gt: String
  svg_ne: String
  forkedBy: [MemeQueryInput]
  commentCount: Int
  title_gte: String
  json_nin: [String]
  _id_in: [ObjectId]
  AND: [MemeQueryInput!]
  upVotes_nin: [UserQueryInput]
  createdAt_ne: DateTime
  template: MemeTemplateQueryInput
  svg_nin: [String]
  commentCount_lte: Int
  comments_exists: Boolean
  createdAt: DateTime
  comments_in: [CommentQueryInput]
  _id_exists: Boolean
  views_gt: Int
  forkedBy_in: [MemeQueryInput]
  points_lt: Int
  createdAt_lte: DateTime
  template_exists: Boolean
  visibility_in: [String]
  commentCount_exists: Boolean
  points_gt: Int
  svg_in: [String]
  views_lt: Int
  points_gte: Int
  json: String
  createdAt_nin: [DateTime]
  url_lt: String
  views_ne: Int
  visibility_gt: String
  downVotes_nin: [UserQueryInput]
  _id_gte: ObjectId
  title_nin: [String]
  title: String
  visibility_gte: String
  createdAt_lt: DateTime
  points_in: [Int]
  _id_gt: ObjectId
  svg: String
  comments: [CommentQueryInput]
  upVotes_in: [UserQueryInput]
  title_ne: String
  forkedFrom_exists: Boolean
  commentCount_gte: Int
  _id_lte: ObjectId
  visibility: String
  svg_exists: Boolean
  url: String
  url_ne: String
  createdAt_gte: DateTime
  OR: [MemeQueryInput!]
  forkedBy_nin: [MemeQueryInput]
  url_exists: Boolean
  upVotes: [UserQueryInput]
  points_exists: Boolean
  title_lt: String
  _id_lt: ObjectId
  visibility_lt: String
  views_nin: [Int]
  commentCount_ne: Int
  json_gt: String
  _id_ne: ObjectId
  forkedBy_exists: Boolean
  _id: ObjectId
  views: Int
  points_nin: [Int]
  points_lte: Int
  commentCount_lt: Int
  visibility_nin: [String]
  title_exists: Boolean
  title_gt: String
  createdBy: UserQueryInput
  downVotes: [UserQueryInput]
  createdAt_gt: DateTime
  visibility_exists: Boolean
  views_gte: Int
  title_in: [String]
  title_lte: String
  json_ne: String
  comments_nin: [CommentQueryInput]
  upVotes_exists: Boolean
  url_gt: String
  points_ne: Int
  visibility_ne: String
  _id_nin: [ObjectId]
  url_gte: String
  views_exists: Boolean
  downVotes_exists: Boolean
  commentCount_nin: [Int]
}

enum MemeSortByInput {
  POINTS_DESC
  _ID_DESC
  CREATEDAT_ASC
  FORKEDFROM_ASC
  FORKEDFROM_DESC
  SVG_ASC
  URL_DESC
  VIEWS_ASC
  VISIBILITY_ASC
  JSON_ASC
  TITLE_ASC
  _ID_ASC
  SVG_DESC
  VISIBILITY_DESC
  CREATEDBY_ASC
  CREATEDAT_DESC
  COMMENTCOUNT_ASC
  COMMENTCOUNT_DESC
  VIEWS_DESC
  CREATEDBY_DESC
  JSON_DESC
  POINTS_ASC
  TITLE_DESC
  URL_ASC
}

type MemeTemplate {
  id: Template
  url: String
}

input MemeTemplateIdRelationInput {
  create: TemplateInsertInput
  link: ObjectId
}

input MemeTemplateInsertInput {
  url: String
  id: MemeTemplateIdRelationInput
}

input MemeTemplateQueryInput {
  AND: [MemeTemplateQueryInput!]
  url_nin: [String]
  url_ne: String
  id: TemplateQueryInput
  id_exists: Boolean
  url_lte: String
  url_lt: String
  url_exists: Boolean
  url_gt: String
  url_gte: String
  url_in: [String]
  url: String
  OR: [MemeTemplateQueryInput!]
}

input MemeTemplateUpdateInput {
  id_unset: Boolean
  url: String
  url_unset: Boolean
  id: MemeTemplateIdRelationInput
}

input MemeUpdateInput {
  comments: MemeCommentsRelationInput
  createdAt: DateTime
  views_inc: Int
  downVotes: MemeDownVotesRelationInput
  url: String
  points: Int
  forkedFrom_unset: Boolean
  commentCount_inc: Int
  svg_unset: Boolean
  title: String
  upVotes_unset: Boolean
  url_unset: Boolean
  views_unset: Boolean
  createdBy: MemeCreatedByRelationInput
  points_unset: Boolean
  svg: String
  _id_unset: Boolean
  forkedBy: MemeForkedByRelationInput
  visibility: String
  createdBy_unset: Boolean
  points_inc: Int
  title_unset: Boolean
  json_unset: Boolean
  createdAt_unset: Boolean
  comments_unset: Boolean
  commentCount_unset: Boolean
  forkedFrom: MemeForkedFromRelationInput
  views: Int
  visibility_unset: Boolean
  downVotes_unset: Boolean
  json: String
  commentCount: Int
  _id: ObjectId
  upVotes: MemeUpVotesRelationInput
  forkedBy_unset: Boolean
  template: MemeTemplateUpdateInput
  template_unset: Boolean
}

input MemeUpVotesRelationInput {
  create: [UserInsertInput]
  link: [ObjectId]
}

type Mutation {
  addComment(input: AddCommentInput): Meme
  addView(input: ObjectId): Meme
  deleteManyComments(query: CommentQueryInput): DeleteManyPayload
  deleteManyDrafts(query: DraftQueryInput): DeleteManyPayload
  deleteManyMemes(query: MemeQueryInput): DeleteManyPayload
  deleteManyTemplates(query: TemplateQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneComment(query: CommentQueryInput!): Comment
  deleteOneDraft(query: DraftQueryInput!): Draft
  deleteOneMeme(query: MemeQueryInput!): Meme
  deleteOneTemplate(query: TemplateQueryInput!): Template
  deleteOneUser(query: UserQueryInput!): User
  downVoteMeme(input: VoteMemeInput): Meme
  insertManyComments(data: [CommentInsertInput!]!): InsertManyPayload
  insertManyDrafts(data: [DraftInsertInput!]!): InsertManyPayload
  insertManyMemes(data: [MemeInsertInput!]!): InsertManyPayload
  insertManyTemplates(data: [TemplateInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneComment(data: CommentInsertInput!): Comment
  insertOneDraft(data: DraftInsertInput!): Draft
  insertOneMeme(data: MemeInsertInput!): Meme
  insertOneTemplate(data: TemplateInsertInput!): Template
  insertOneUser(data: UserInsertInput!): User
  replaceOneComment(data: CommentInsertInput!, query: CommentQueryInput): Comment
  replaceOneDraft(query: DraftQueryInput, data: DraftInsertInput!): Draft
  replaceOneMeme(query: MemeQueryInput, data: MemeInsertInput!): Meme
  replaceOneTemplate(query: TemplateQueryInput, data: TemplateInsertInput!): Template
  replaceOneUser(data: UserInsertInput!, query: UserQueryInput): User
  upVoteMeme(input: VoteMemeInput): Meme
  updateManyComments(query: CommentQueryInput, set: CommentUpdateInput!): UpdateManyPayload
  updateManyDrafts(query: DraftQueryInput, set: DraftUpdateInput!): UpdateManyPayload
  updateManyMemes(query: MemeQueryInput, set: MemeUpdateInput!): UpdateManyPayload
  updateManyTemplates(query: TemplateQueryInput, set: TemplateUpdateInput!): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneComment(query: CommentQueryInput, set: CommentUpdateInput!): Comment
  updateOneDraft(query: DraftQueryInput, set: DraftUpdateInput!): Draft
  updateOneMeme(query: MemeQueryInput, set: MemeUpdateInput!): Meme
  updateOneTemplate(query: TemplateQueryInput, set: TemplateUpdateInput!): Template
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneComment(query: CommentQueryInput, data: CommentInsertInput!): Comment
  upsertOneDraft(query: DraftQueryInput, data: DraftInsertInput!): Draft
  upsertOneMeme(query: MemeQueryInput, data: MemeInsertInput!): Meme
  upsertOneTemplate(query: TemplateQueryInput, data: TemplateInsertInput!): Template
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
}

scalar ObjectId

type Query {
  comment(query: CommentQueryInput): Comment
  comments(query: CommentQueryInput, limit: Int = 100, sortBy: CommentSortByInput): [Comment]!
  draft(query: DraftQueryInput): Draft
  drafts(sortBy: DraftSortByInput, query: DraftQueryInput, limit: Int = 100): [Draft]!
  fetchMeme(input: FetchMemeInput): Meme
  fetchRandomMeme(input: FetchRandomMemeInput): Meme
  meme(query: MemeQueryInput): Meme
  memes(sortBy: MemeSortByInput, query: MemeQueryInput, limit: Int = 100): [Meme]!
  template(query: TemplateQueryInput): Template
  templates(query: TemplateQueryInput, limit: Int = 100, sortBy: TemplateSortByInput): [Template]!
  user(query: UserQueryInput): User
  users(query: UserQueryInput, limit: Int = 100, sortBy: UserSortByInput): [User]!
}

type Template {
  _id: ObjectId
  createdAt: DateTime
  createdBy: User
  height: Int
  img: String
  type: String
  url: String
  width: Int
}

input TemplateCreatedByRelationInput {
  link: ObjectId
  create: UserInsertInput
}

input TemplateInsertInput {
  createdAt: DateTime
  createdBy: TemplateCreatedByRelationInput
  height: Int
  img: String
  type: String
  url: String
  width: Int
  _id: ObjectId
}

input TemplateQueryInput {
  createdAt_lte: DateTime
  img_lt: String
  url_nin: [String]
  _id_lte: ObjectId
  img_in: [String]
  type_gt: String
  height_nin: [Int]
  img_lte: String
  url_lte: String
  type_exists: Boolean
  OR: [TemplateQueryInput!]
  height_lt: Int
  createdAt_gt: DateTime
  createdBy_exists: Boolean
  _id_gt: ObjectId
  type: String
  type_ne: String
  type_nin: [String]
  createdAt_ne: DateTime
  img_ne: String
  createdAt: DateTime
  img: String
  img_gte: String
  height_ne: Int
  createdBy: UserQueryInput
  createdAt_lt: DateTime
  createdAt_nin: [DateTime]
  height_exists: Boolean
  type_lte: String
  width_lt: Int
  url_in: [String]
  height_gte: Int
  _id_lt: ObjectId
  createdAt_gte: DateTime
  _id_exists: Boolean
  width_exists: Boolean
  img_exists: Boolean
  height: Int
  width_lte: Int
  width_nin: [Int]
  url: String
  createdAt_exists: Boolean
  url_lt: String
  url_exists: Boolean
  width_ne: Int
  img_nin: [String]
  url_ne: String
  AND: [TemplateQueryInput!]
  img_gt: String
  height_lte: Int
  width_in: [Int]
  type_gte: String
  _id_gte: ObjectId
  _id: ObjectId
  height_in: [Int]
  url_gt: String
  url_gte: String
  createdAt_in: [DateTime]
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
  width: Int
  width_gt: Int
  width_gte: Int
  _id_ne: ObjectId
  height_gt: Int
  type_in: [String]
  type_lt: String
}

enum TemplateSortByInput {
  URL_ASC
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  HEIGHT_DESC
  WIDTH_ASC
  IMG_ASC
  IMG_DESC
  URL_DESC
  CREATEDBY_ASC
  CREATEDBY_DESC
  HEIGHT_ASC
  TYPE_DESC
  WIDTH_DESC
  CREATEDAT_DESC
  TYPE_ASC
}

input TemplateUpdateInput {
  img: String
  type: String
  url: String
  createdAt_unset: Boolean
  createdAt: DateTime
  width: Int
  img_unset: Boolean
  width_unset: Boolean
  url_unset: Boolean
  _id_unset: Boolean
  createdBy_unset: Boolean
  type_unset: Boolean
  _id: ObjectId
  height: Int
  createdBy: TemplateCreatedByRelationInput
  height_inc: Int
  width_inc: Int
  height_unset: Boolean
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type User {
  _id: ObjectId
  createdAt: DateTime
  email: String
  name: String
  uid: String
}

input UserInsertInput {
  createdAt: DateTime
  email: String
  name: String
  uid: String
  _id: ObjectId
}

input UserQueryInput {
  _id_ne: ObjectId
  createdAt_lt: DateTime
  name: String
  uid: String
  createdAt_exists: Boolean
  email_gte: String
  _id_nin: [ObjectId]
  createdAt_ne: DateTime
  email_exists: Boolean
  createdAt_gt: DateTime
  uid_ne: String
  uid_exists: Boolean
  uid_nin: [String]
  name_lte: String
  _id_lte: ObjectId
  name_gte: String
  name_in: [String]
  name_gt: String
  createdAt: DateTime
  name_ne: String
  createdAt_nin: [DateTime]
  createdAt_gte: DateTime
  email: String
  uid_gte: String
  email_lt: String
  name_lt: String
  email_in: [String]
  name_nin: [String]
  email_ne: String
  createdAt_lte: DateTime
  AND: [UserQueryInput!]
  email_lte: String
  uid_lte: String
  name_exists: Boolean
  createdAt_in: [DateTime]
  _id_in: [ObjectId]
  _id_exists: Boolean
  email_nin: [String]
  uid_in: [String]
  uid_lt: String
  _id_gt: ObjectId
  OR: [UserQueryInput!]
  _id_gte: ObjectId
  _id_lt: ObjectId
  uid_gt: String
  _id: ObjectId
  email_gt: String
}

enum UserSortByInput {
  NAME_ASC
  UID_DESC
  _ID_ASC
  CREATEDAT_ASC
  CREATEDAT_DESC
  EMAIL_ASC
  EMAIL_DESC
  NAME_DESC
  UID_ASC
  _ID_DESC
}

input UserUpdateInput {
  email_unset: Boolean
  createdAt_unset: Boolean
  name_unset: Boolean
  uid_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  createdAt: DateTime
  email: String
  name: String
  uid: String
}

input VoteMemeInput {
  meme_id: ObjectId!
  user_id: ObjectId!
}
